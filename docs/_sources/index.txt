.. Unbxd JAVA SDK documentation master file, created by
   sphinx-quickstart on Mon Aug  4 10:41:39 2014.
   You can adapt this file completely to your liking, but it should at least
   contain the root `toctree` directive.

.. toctree::
   :maxdepth: 3
   demo

================================
Introduction
================================

This SDK will enable you to use full feature set of Unbxd APIs. 
You will be able to do the following through this SDK: 

* Upload Feed
* Make Search calls
* Make Autosuggest calls
* Make Recommendation calls

For details you can refer to the source on `GitHub <https://github.com/unbxd/java-sdk>`_.	

Adding the dependency
=====================
Add the following dependency in you pom.xml file::

	<dependency>
		<groupId>com.unbxd</groupId>
		<artifactId>unbxd-java-sdk</artifactId>
		<version>2.0</version>
	</dependency>


Configuration
=============
The SDK must be initialized in the following manner::

	Unbxd.configure("Your Site ID", "Your API Key", "Your Secret Key");

If you want all the calls to happen over an HTTPS link do the following::

	Unbxd.configure("Your Site ID", "Your API Key", "Your Secret Key",1);


Pushing the feed
================

Adding products
***************

The following lines of code would send a couple of products to Unbxd Servers::

	Map<String, Object> product1 = new HashMap<String, Object>();
	product1.put("title", "nice shoes"); // Title of the product
	product1.put("some-field", "test-field-value"); // A custom field
	product1.put("brand", "Adidas");
	product1.put("category", "Sports Shoes");
	product1.put("price", 1100);

	Map<String, Object> product2 = new HashMap<String, Object>();
	product2.put("title", "leather jacket");
	product2.put("some-field", "test-field-value2");
	product2.put("brand", "Adidas");
	product2.put("category", "Jackets");
	product2.put("price", 5000);

	FeedResponse response = Unbxd.getFeedClient()
				.addSchema("some-field", DataType.TEXT) // Adds a custom field
				.addProduct(new FeedProduct("sku1", product1)) // sku1 is the Unique Id for the product
				.addProduct(new FeedProduct("sku2", product2))
				.push(false);
You can find the list of pre-configured fields here TODO. The above code adds a field "some-field" to the schema.

Marking custom field as multivalued
###################################

The custom field can be marked to allow multiple values like this::
	
	.addSchema("some-field", DataType.TEXT, true, false) // Adds a custom field

Including custom field in Auto-Suggest
######################################

The custom field can be marked to be included in Auto-Suggest like this::
	
	.addSchema("some-field", DataType.TEXT, false, true) // Adds a custom field

Flush existing product
######################

If you wish to flush out all the existing products while indexing new products you need to call .push(true) like this::

	FeedResponse response = Unbxd.getFeedClient()
				.addSchema("some-field", DataType.TEXT) // Adds a custom field
				.addProduct(new FeedProduct("sku1", product))
				.addProduct(new FeedProduct("sku2", product2))
				.push(true);

Updating products
***************

To update an existing product you call do the following::
	
	Map<String, Object> product = new HashMap<String, Object>();
	product.put("title", "new title");
	
	FeedResponse response = Unbxd.getFeedClient().updateProduct(new FeedProduct("sku1", product)).push(false);

Deleting products
***************

To delete an existing product you call do the following::
	
	FeedResponse response = Unbxd.getFeedClient().deleteProduct("sku1").push(false);

Understanding FeedResponse Object
*********************************

::
	
	response
	|
	+-> .getStatusCode() // 200 if success.
	+-> .getMessage() // Get error message if any
	+-> .getUploadID() // Id for the upload request
	+-> .getUnknownSchemaFields() // List of fields whose schema was unknown if any
	+-> .getFieldErrors() // Errors that occured at a field level
		|
		+-> .getFieldName() // Name of the field
		+-> .getFieldValue() // Value of the field
		+-> .getDataType() // Data type of the field
		+-> .isMultivalued() // True if field is multivalued
		+-> .getErrorCode() // Error code
		+-> .getMessage() // Get error message
			

Using Search Client
===================

Making a Search Call
********************

The following code snippet will make a search call with query "shirts"::
	
	SearchResponse response = Unbxd.getSearchClient().search("shirts", null).execute();

The following code snippet will make a search call with query "shirts" with filters, will sort it on price and return the second page of the results::
	
	SearchResponse response = Unbxd.getSearchClient()
			.search("shirts", null)
			.addTextFilter("color_fq","black")
			.addTextFilter("brand_fq", "Ralph Lauren")
				.addRangeFilter(“price_fq”, 1000, 3000)
			.addSort("price", SearchClient.SortDir.ASC)
			.setPage(2, 10) // 10 products per page
			.execute();

Extra query parameters can be added like this::

	Map<String, String> queryParams = new HashMap<String, String>();
		queryParams.put("fl", "title"); // will return only product titles
		queryParams.put("stats", "price"); // will include price stats in the response

	SearchResponse response = Unbxd.getSearchClient()
			.search("shirts", queryParams)
			.addTextFilter("color_fq","black")
			.addTextFilter("brand_fq", "Ralph Lauren")
				.addRangeFilter(“price_fq”, 1000, 3000)
			.addSort("price", SearchClient.SortDir.ASC)
			.setPage(2, 10) // 10 products per page
			.execute();


Making a Bucketing Call
***********************

The following code snippet will make a bucketing call with query "shirts" and bucket "category"::
	
	SearchResponse response = Unbxd.getSearchClient().bucket("shirts", "category", null).execute();

All other options are same as the Search call

Making a Browse Call
********************

The following code snippet will make a browse call with category id "1":
	
	SearchResponse response = Unbxd.getSearchClient().browse("1", null).execute();

All other options are same as the Search call

Understanding SearchResponse
************************************

::
	
	response
	|
	+-> .getStatusCode() // 200 if success.
	+-> .getErrorCode() // error code
	+-> .getMessage() // Get error message if any
	+-> .getQueryTime() // Time taken to generate results
	+-> .getTotalResultsCount() // Total Number of results
	+-> .getResults() // Results
		|
		+-> .getResultsCount() // Number of results present
		+-> .getAt(int i) // Get at index i
			|
		+-> .getResults() // Get results as array()
			|
			+-> .getUniqueId() // Get Unique Id of the product
			+-> .getAttributes() // Get attributes as map
			+-> .getAttribute(String fieldName) // Get attribute with name : fieldName
	+-> .getFacets() // facets
		|
		+-> .getFacets() // Get facets as list
			|
		+-> .getFacetsAsMap() // Get facets as list
			|
			+-> .getName() // Name of the facet
			+-> .getType() // Type of the facet
				+-> .getPosition() //Get facet positon
				+-> .getDisplayName() //Get display name
			+-> .getEntries() // Get facet entries as list
				|
				+-> .getTerm() // Get facet term
				+-> .getCount() // Get facet count
	+-> .getStats() // Stats. Will be present only if query parameters had a stats parameter
		|
		+-> .getStats() // Map of field and stats
			|
		+-> .getStat(String fieldName) // Stats for field : fieldName
			|
			+-> .getCount() // Count of all values
			+-> .getMin() // Minimum value
			+-> .getMax() // Maximum value
			+-> .getSum() // Sum of all values
			+-> .getMean() // Mean of all values
	+-> .getBuckets() // Get Buckets. Only present when a bucket call was made
		|
		+-> .getNumberOfBuckets() // Number of buckets
		+-> .getBucket(String value) // Get Bucket for field value
		+-> .getBuckets() // List of buckets
	+-> .getBanner() // Get Banners.
	   	     |
	   	     +-> .getImageUrl()
	   	     +-> .getLandingPageUrl()
	+-> .getSpellCorrections() // Spell corrections


Using AutoSuggest Client
========================

The following code snippet will make a autosuggest call with query "shi"::

	AutoSuggestResponse response = Unbxd.getAutoSuggestClient().autosuggest("shi").execute();

Understanding AutoSuggestResponse
************************************

::
	
	response
	|
	+-> .getStatusCode() // 200 if success.
	+-> .getErrorCode() // error code
	+-> .getMessage() // Get error message if any
	+-> .getQueryTime() // Time taken to generate suggestions
	+-> .getTotalResultsCount() // Number of suggestions
	+-> .getResults() // Results
		|
		+-> .getResultSections() // Map of AutoSuggestType and AutoSuggestResultSection
			|
		+-> .getInFieldSuggestions() // Get In Field Suggestions
			|
		+-> .getPopularProducts() // Get Popular Products Suggestions
			|
		+-> .getKeywordSuggestions() // Get Keyword Suggestions
			|
		+-> .getTopQueries() // Get Suggested Top Queries
			|
			+-> .getResultsCount() // Number of suggestions
			+-> .getAt(int i) // Get at index i
				|
			+-> .getResults() // Get suggestions as array()
				|
				+-> .getSuggestion() // Get suggestion
				+-> .getAttributes() // Get attributes as map
				+-> .getAttribute(String fieldName) // Get attribute with name : fieldName


Using the Recommendations Client
================================

Get Recently Viewed Products
****************************

::
	
	RecommendationResponse response = Unbxd.getRecommendationsClient().getRecentlyViewed(uid,"100.0.0.1"); // uid is value of the cookie : "unbxd.userId", "100.0.0.1" is IP address

Get Recommended For You Products
****************************
	
::

	RecommendationResponse response = Unbxd.getRecommendationsClient().getRecommendedForYou(uid, "100.0.0.1"); // uid is value of the cookie : "unbxd.userId"

Get More Like This Products
****************************
	
::

	RecommendationResponse response = Unbxd.getRecommendationsClient().getMoreLikeThis("sku1", uid, "100.0.0.1"); // uid is value of the cookie : "unbxd.userId" "100.0.0.1" is IP address


Get Also Viewed Products
****************************
	
::

	RecommendationResponse response = Unbxd.getRecommendationsClient().getAlsoViewed("sku1", uid"100.0.0.1"); // uid is value of the cookie : "unbxd.userId" "100.0.0.1" is IP address

Get Also Bought Products
****************************
	
::

	RecommendationResponse response = Unbxd.getRecommendationsClient().getAlsoBought("sku1", uid"100.0.0.1"); // uid is value of the cookie : "unbxd.userId" "100.0.0.1" is IP address

Get Top Selling Products
************************
	
::

	RecommendationResponse response = Unbxd.getRecommendationsClient().getTopSellers(uid, "100.0.0.1");  // uid is value of the cookie : "unbxd.userId" "100.0.0.1" is IP address

Get Top Selling Products within a Category
******************************************
	
::

	RecommendationResponse response = Unbxd.getRecommendationsClient().getCategoryTopSellers("Shoes", uid, "100.0.0.1");  // uid is value of the cookie : "unbxd.userId" "100.0.0.1" is IP address

Get Top Selling Products within a Brand
***************************************
	
::

	RecommendationResponse response = Unbxd.getRecommendationsClient().getBrandTopSellers("Adidas", uid, "100.0.0.1");  // uid is value of the cookie : "unbxd.userId" "100.0.0.1" is IP address "100.0.0.1" is IP address

Get Top Selling Products similar to a product
*********************************************
	
::

	RecommendationResponse response = Unbxd.getRecommendationsClient().getPDPTopSellers("sku1", uid, "100.0.0.1");  // uid is value of the cookie : "unbxd.userId" "100.0.0.1" is IP address

Get Products based on Cart
**************************
	
::

	RecommendationResponse response = Unbxd.getRecommendationsClient().getCartRecommendations(uid, "100.0.0.1");  // uid is value of the cookie : "unbxd.userId" "100.0.0.1" is IP address


Understanding RecommendationResponse
************************************

::
	
	response
	|
	+-> .getStatusCode() // 200 if success.
	+-> .getErrorCode() // error code
	+-> .getQueryTime() // Time taken to generate recommendations
	+-> .getTotalResultsCount() // Number of recommendations
	+-> .getResults() // Recommendations
		|
		+-> .getResultsCount() // Number of recommendations
		+-> .getAt(int i) // Get at index i
			|
		+-> .getResults() // Get recommendations as array()
			|
			+-> .getUniqueId() // Get Unique Id of the product
			+-> .getAttributes() // Get attributes as map
			+-> .getAttribute(String fieldName) // Get attribute with name : fieldName

